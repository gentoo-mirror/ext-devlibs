--- a/src/OpenDis.c	2010-09-22 03:25:24.000000000 +0200
+++ b/src/OpenDis.c	2010-12-07 17:13:40.000000000 +0100
@@ -69,6 +69,7 @@
 	int j, k;			/* random iterator indexes */
 	char *display_name;		/* pointer to display name */
 	char *setup = NULL;		/* memory allocated at startup */
+	char *fullname = NULL;		/* expanded name of display */
 	int iscreen;			/* screen number */
 	xConnSetupPrefix prefix;	/* prefix information */
 	int vendorlen;			/* length of vendor string */
@@ -116,17 +117,13 @@
 		return(NULL);
 	}
 
-	if ((dpy->display_name = strdup(display_name)) == NULL) {
-		OutOfMemory(dpy);
-		return(NULL);
-	}
-
 /*
  * Call the Connect routine to get the transport connection object.
- * If NULL is returned, the connection failed.
+ * If NULL is returned, the connection failed. The connect routine
+ * will set fullname to point to the expanded name.
  */
 
-	if(!_XConnectXCB(dpy, display, &iscreen)) {
+	if(!_XConnectXCB(dpy, display, &fullname, &iscreen)) {
 		/* Try falling back on other transports if no transport specified */
 		const char *slash = strrchr(display_name, '/');
 		if(slash == NULL) {
@@ -138,13 +135,14 @@
 			if(buf) {
 				for(s = protocols; buf && *s; s++) {
 					snprintf(buf, buf_size, "%s/%s", *s, display_name);
-					if(_XConnectXCB(dpy, buf, &iscreen))
+					if(_XConnectXCB(dpy, buf, &fullname, &iscreen))
 						goto fallback_success;
 				}
 				Xfree(buf);
 			}
 		}
 
+		dpy->display_name = fullname;
 		OutOfMemory(dpy);
 		return NULL;
 	}
@@ -154,6 +152,7 @@
 	 * Initialize pointers to NULL so that XFreeDisplayStructure will
 	 * work if we run out of memory before we finish initializing.
 	 */
+	dpy->display_name	= fullname;
 	dpy->keysyms		= (KeySym *) NULL;
 	dpy->modifiermap	= NULL;
 	dpy->lock_meaning	= NoSymbol;
@@ -315,7 +314,7 @@
 	if (!mask)
 	{
 	    fprintf (stderr, "Xlib: connection to \"%s\" invalid setup\n",
-		     dpy->display_name);
+		     fullname);
 	    OutOfMemory(dpy);
 	    return (NULL);
 	}
@@ -679,7 +678,8 @@
             Xfree ((char *)dpy->pixmap_format);
 	    }
 
-	free(dpy->display_name);
+	if (dpy->display_name)
+	   Xfree (dpy->display_name);
 	if (dpy->vendor)
 	   Xfree (dpy->vendor);
 
--- a/src/xcb_disp.c	2010-09-22 03:25:24.000000000 +0200
+++ b/src/xcb_disp.c	2010-12-07 17:13:40.000000000 +0100
@@ -54,10 +54,11 @@
 	_XUnlockMutex(_Xglobal_lock);
 }
 
-int _XConnectXCB(Display *dpy, _Xconst char *display, int *screenp)
+int _XConnectXCB(Display *dpy, _Xconst char *display, char **fullnamep, int *screenp)
 {
 	char *host;
 	int n = 0;
+	int len;
 	xcb_connection_t *c;
 
 	dpy->fd = -1;
@@ -68,7 +69,20 @@
 
 	if(!xcb_parse_display(display, &host, &n, screenp))
 		return 0;
-	/* host and n are unused, but xcb_parse_display requires them */
+
+	len = strlen(host) + (1 + 20 + 1 + 20 + 1);
+	*fullnamep = Xmalloc(len);
+	if (!*fullnamep) {
+		free(host);
+		return 0;
+	}
+
+#ifdef HAVE_LAUNCHD
+	if(strncmp(host, "/tmp/launch", 11) == 0)
+		snprintf(*fullnamep, len, "%s:%d", host, n);
+	else
+#endif
+		snprintf(*fullnamep, len, "%s:%d.%d", host, n, *screenp);
 	free(host);
 
 	_XLockMutex(_Xglobal_lock);
--- a/src/Xxcbint.h	2010-09-22 03:25:24.000000000 +0200
+++ b/src/Xxcbint.h	2010-12-07 17:13:40.000000000 +0100
@@ -40,7 +40,7 @@
 
 /* xcb_disp.c */
 
-int _XConnectXCB(Display *dpy, _Xconst char *display, int *screenp);
+int _XConnectXCB(Display *dpy, _Xconst char *display, char **fullnamep, int *screenp);
 void _XFreeX11XCBStructure(Display *dpy);
 
 #endif /* XXCBINT_H */
